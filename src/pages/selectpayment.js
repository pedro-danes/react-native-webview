import React, {Component} from 'react';
import {Platform, StyleSheet, Text, View, ScrollView ,Button, Alert} from 'react-native';  
import KeyboardSpacer from 'react-native-keyboard-spacer';
import { CreditCardInput } from 'react-native-credit-card-input';
const STRIPE_ERROR = 'Payment service error. Try again later.';
const SERVER_ERROR = 'Server error. Try again later.';
const STRIPE_PUBLISHABLE_KEY = 'pk_test_QTZhQdSoWVXtDsRs8HanXqm3';
import { FontAwesome } from '@expo/vector-icons';


const styles = StyleSheet.create({
    container: {
      flex: 1
    },
    textWrapper: {
      margin: 10
    },
    infoText: {
      fontSize: 18,
      textAlign: 'center'
    },
    cardFormWrapper: {
      padding: 10,
      margin: 10
    },
    buttonWrapper: {
      padding: 10,
      zIndex: 100
    },
    alertText: {
      color: '#c22',
      fontSize: 16,
      fontWeight: '400'
    },
    alertWrapper: {
      backgroundColor: '#ecb7b7',
      justifyContent: 'space-between',
      alignItems: 'center',
      flexDirection: 'row',
      flexWrap: 'wrap',
      borderRadius: 5,
      paddingVertical: 5,
      marginTop: 10
    }
  });

  const getCreditCardToken = (cardDatadetail) => {
    const card = {
      'card[number]': cardDatadetail.number.replace(/ /g, ''),
      'card[exp_month]': cardDatadetail.expiry.split('/')[0],
      'card[exp_year]': cardDatadetail.expiry.split('/')[1],
      'card[cvc]': cardDatadetail.cvc
    };
    // send card detail to stripe to get tokenid used to send payment detail to server
    return fetch('https://api.stripe.com/v1/tokens', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded',
        Authorization: `Bearer ${STRIPE_PUBLISHABLE_KEY}`
      },
      method: 'post',
      body: Object.keys(card)
        .map(key => key + '=' + card[key])
        .join('&')
    }).then(response => response.json());
  };
  /**
   * The method imitates a request to our server.
   *
   * @param creditCardToken
   * @return {Promise<Response>}
   */
  const subscribeUser = (creditCardToken) => {

    console.log("credit card information\n ",creditCardToken)
    return new Promise((resolve) => {
      // hit api here to send token price desc and other information to recive payment confirmation message
          //pay("10","testing payment",creditCardToken.id)
      setTimeout(() => {
        resolve({ status: true });
      }, 1000)
    });
  };

  const pay = async (amount, description, creditCardToken) => {
    const data = {
      'amount': amount, // subs price
      'description': description, // any descri
      'token_id': token_id // the token generated by Stripe
    };

    const headers = {
      'Content-Type': 'application/json',
    };

    let response = false;
    try {
      let response_data = await axios.post(endpoint, data, { headers });
      return true;
    } catch (e) {
      console.log('server error: ', e);
    }
    return response;      
  }
export default class Selectpayment extends Component {

  constructor(props) {
    super(props);
    this.state = { cardData: { valid: false },submitted:false };
  }
  static navigationOptions = {
    title: 'Payment Page',
  };
 
  // render the subscription view component and pass the props to it
  render() {
    const { submitted, error } = this.state;
        const { onSubmit } = this.props;

    return (
      <View style={styles.container}>
      <ScrollView style={styles.container} ref={ref => (this.scrollViewRef = ref)}>
        <View style={styles.textWrapper}>
          <Text style={styles.infoText}>
            Stripe Payment Gateway
          </Text>
        </View>
        <View style={styles.textWrapper}>
          <Text style={styles.infoText}>
            Subscribe to unlock games
          </Text>
        </View>
        <View style={styles.textWrapper}>
          <Text style={styles.infoText}>
            Subscription Plan at just: $5/month
          </Text>
        </View>
        <View style={styles.cardFormWrapper}>
        <View>
          <CreditCardInput requiresName onChange={(cardData) => this.setState({ cardData })} />
        </View>
        <View style={styles.buttonWrapper}>
          <Button
            title='Subscribe'
            disabled={!this.state.cardData.valid ||submitted}
            onPress={this.submittedcard.bind(this)}
          />
          {/* display errors below subs button  */}
          {error && (
            <View style={styles.alertWrapper}>
              <View style={styles.alertIconWrapper}>
                <FontAwesome name="exclamation-circle" size={20} style={{ color: '#c22' }} />
              </View>
              <View style={styles.alertTextWrapper}>
                <Text style={styles.alertText}>{error}</Text>
              </View>
            </View>
          )}
        </View>
    
        </View>
      </ScrollView>
      {/* Scrolls to the payment form */}
      <KeyboardSpacer
        onToggle={() => { setTimeout(() => this.scrollViewRef.scrollToEnd({ animated: true }),0)} }
      />
    </View>
    );
  }
  async submittedcard()
  {
    console.log("check click")
    const { navigation } = this.props;
    // Disable the Submit button after the request is sent
    this.setState({ submitted: true });
    let creditCardToken;
    try {
      // Create a credit card token
      // get card value
      creditCardToken = await getCreditCardToken(this.state.cardData.values);
      if (creditCardToken.error) {
        // Reset the state if Stripe responds with an error
        // Set submitted to false to let the user subscribe again
        this.setState({ submitted: false, error: STRIPE_ERROR });
        return;
      }
    } catch (e) {
      console.log("error stripe card detail ",e)
      
      // Set submitted to false to let the user subscribe again
      this.setState({ submitted: false, error: STRIPE_ERROR });
      return;
    }
    // pass creditcard detail to server for payment
    const { error } = await subscribeUser(creditCardToken);
    if (error) {
      this.setState({ submitted: false, error: SERVER_ERROR});
    } else {
      // done we show creditcard id
      Alert.alert("Done! Your Token is",creditCardToken.id);
    }
  }
}
